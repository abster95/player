
--------------------------------------------------------------------------------
--------------------- IMMEDIATE  - what is being worked on ---------------------
--------------------------------------------------------------------------------

- add uri verifier before adding to playlist and get runtime exception
- context menus for all windows
- LastFM saveLogin return boolean success flag - use in Window LastFmB when
  saving to turn on Scrobbling on success
- password config field
- make ActionConfig, clean configurable & configuration
- popover padding solve
- popover position jumps when drag starts
- tagger use trash big icon or sth when removing cover by drag and add icon
  for the reverse operation
- interrupt reading if double reading
- support 'infos' - custom tagged extended comments like chapters - figure out
  a good delimiter character - '|' is too common i think
- skin setting defaulting
- window apply overlay on new window upon creation
- windw header visible preference application is weird                          (test)
- popover set arrow location automatically based on available screen space
- tab container not remembering its children - why this again                   (major)
- windows simplify layout saving - all old files can be removed now
- mini window controls move from widget to window - add mini view to it too
- tabview tab close button skin
  getWidget - implement Target
- Player update item not refreshing selected pl item
- splitter absolute size for both children
- rater controls not resizing graphics
- playlist table header button implement properly column hiding (nasty bug)
- playlist sorting
- playlist index column width still not perfect
- blurry Configurator graphics
- picker size fix + delete ContextPopOver?
- rating star button style remove border

--------------------------------------------------------------------------------
-------------------- FUNCTIONALITY - what is planned ahead, ideas --------------
--------------------------------------------------------------------------------

- bgr scrolling use easing function to slow it down when close to edges
  preferrably to infinity so the scroll speed never reaches zero
  it jsut needs good function and figure out the binding or use listener
- setings & configurable subcategories through '.' or '/'
- beautify layout manager widget - add info popup and improve layout and looks
  involves turning layout info turning into ValueConfigurable
- layout manager add mockup layout builder to make custom layout without loading
  the widgets, perhaps also display this mockup instead of thumbnail
- add URI configField
- file info handle long comment texts label->Text, add scrollbar ?
- configurable support sub configurable by default
- figure out LoopMode - class on its own or within NextItemSelector
- figure out LoopMode - should include Random? implement properly
- finish the whole nextPlayingItem() thing. support with GUI
- seeker option to show chapters as they are passing
- cursor trail effect - 'frozen" effect
- cursor api clean up, fix appliers, make actually usable
- seeker orientation property and support with layout (chapter positions too)
- settable img bgr
- TextFlow for smart text tables
- gradient masks - it IS possible, proved by image on drag&drop, but HOW?
- widget manager widget
- cursor effect to popup, get rid of effectPane
- tagger ability to add or remove from the list by CTRL/SHIFT drag&drop on popup
- tagger disable unsupported fields for type
- tagger multithreaded writing to tag                                           (test if needed, ?)
- playlist tabs
- import/export some of the most used playlist file formats
- gestures & touch
- tagger filename change                                                        (?)
- context menus circular labels' position off

FURTHER DOWN THE LIST FUNCTIONALITIES
- even more flexibly resizable widget areas
- cover downloading widget
- general table object - remember 'state':
    editable/non editable                                                       // done
    generate from POJO
    read database records
    sorting, filtering                                                          // done
    header                                                                      // done
    columns visibility - make use of manual factories?
    columns order                                                               // done        
    columns relative size                                                       // done
    columns wider than table - scroll                                           // done
- color graph of all songs
- monitor folder content for changes (playlists, layouts, skins, widgets, ...)  (?)
- finish metadata reading/writing flac, ogg (most are already done)
- playback ogg, flac

APP
- tray                                                                          (use awt & swing ?)
- OS taskbar, ... support
- associate with supported files

IMAGE VIEWER
- show subfolder names and categorize images                                    (?)
- add multiple sources (tag, cds, folder, 'associated') and separate

GALAXY MAP
- just about everything
- enum like every field...
- map type representants: x, y, z, color, label, shape, ...

DIRS
- figure out folder monitoring
- add some fancy stuff
- implement removing dirs

--------------------------------------------------------------------------------
------------------------ BUGS - what i dot want to hear about ------------------
--------------------------------------------------------------------------------

GENERAL
- playlist deselecting single items with CTRL not working sometimes             (medium, still an issue?)
- Enviroment Dektop.browse() doesnt select files in explorer but opens them     (unsolvable?)
- little bug with position slider on repositioning                              (minor)
  cause: it takes a while for seek() to actually seek. During this time the
  seeker jumps back to current position. Its bad because the seeker already was
  at the right position when mouse pressed took place - solution unknown
  idea: use 2nd thumb for seeking or allow position change only within treshold
  from the seeked position for limited amount of time
- playlist item moving change order when moving fast even for jsut 1 block      (medium-major, investigate)
- backslash (\) shortcut not working for left backslash key (left from Z)       (medium, since more stuff can be affected)
  status: currently unsolvable, so far one of its kind
  problem: jintellitype '\' works only for right '\' not left one (yes there are
  two '\' keys on the keyboard).
- shift scrolling not working anymore for tables (supposed to scroll horizontly)
- global shortcuts sometimes still fail to register to proper keys and register (medium, investigate cases)
  for ALT instead. It happened only once since last reimplementation and it was
  probabyly a result of messing around with configs. But it can still produce
  issues and return.
- starting playback at given previous position seeks to beginning for a while   (medium)
  cause: possibly the same as the seeker bug
- local shortcuts for complex characters (BACK_SLASH, etc) not working
  solution: solved for some characters by manually rewriting them upon
  shortcut registering, but thats only partial and incomplete workaround
- css parsing errors for settings widget - cant resolve value                   (minor, NaP, doesnt break funonality)
  cause: lazy loading of css file, possible javaFX bug
  note: its interesting Settings widget causes this but not others
- popup window fullcreen or maximizing(any) breaks popup position               (minor, but should be fixed if possible)
- tagger verifier causes layout graphics to break when mouse over window border (controlsFX bug, unsolvable for now)

SOLVED (but the underlying cause still deserves attention)
- reading metadata COMMENT tag field incorrectly reads CUSTOM1 if comment       (medium)
  nonempty.
  solution: custom comment reading method filters out CUSTOM fields             (great)
- split container divider position doesnt load properly (vertical only).        (medium)
  This has something to do with some other (probably orientation) property
  overriding divider position and consequently changing the "pos" value in the
  very container ultimately losing the original position value
  solution: change container "pos" value only when divider position changes as  (bad)
  a result of mouse dragging.
  problem: performance aspect. There is possibility of infinite recursive call
  for setting divider position. Plus the setPosition is now called multiple
  times depending on depth within layout map possibly with O(n) or worse. This
  is because of the recursive nature of layout map loading where children are
  loaded before parent, causing additional resize pass for every depth iteration
  when the parent loads. This is possibly worse than O(3^x)!
  solution: the layout map shouldnt load recursively. This has potential to
  get rid of major resizing bugs on layout init (like thumbnails and custom
  layouts).
- javafx.scene.text.Text doesnt have css style class and as such doesn allow
  default values and skinning
  solution: Text class extending javafx.scene.text.Text and adding custom 
  styleclass. Use instead of the original if default behavior (skin) is expected
  Also got a nice additional method.
- open PopOvers prevent app to close normally.                                  (medium-major)
  cause: java or controlsFX bug                                                 (unsolvable)
  solution: manually close them all when main window closes (introduces some    (ideal)
  code pollution). This is very controversial solution but works great.
- fullscreen not initializing on window deserialization, update() method bug    (minor)
  cause: unknown                                                                (javafx bug?)
  problem: fullscreen is set, resizability is set to false, the hint is shown
  but the window does not cover whole screen - maybe its too soon
  and the window is not really fully initialized
  solution: delay execution 100ms (see WindowBase.update())                     (not ideal but no problems)
- app not closing propery on ALT+F4                                             (medium-major)
  cause: ALT+F4 closes focused window not application. It somehow closes windows(problematic)
  without closing them (close() does not get invoked). Because of this closing
  main window this way doesnt execute the necessary actions. Also, with the
  hidden owner window app wont close as one window remains open
  solution: have onCloseRequest event execute close()                           (great so far)


PROBLEMS
- widget controllers initialization && widget refresh
  init method should be invoked only once!
- fxml widget deserializing prevent app crash when deserialized widget has no   (minor, but invasive misbehavior)
  factory available - also instantiatingController should never return null in
  fxmlFactory
- windows hard to drag, especially in headerless mode, uidrag consume event, 
  properly handle vol scolling and app dragging event consuminf at widget level
- dynamically create LayoutAggregator depending on size or preferences when
  deserializing and creating windows, or make it into a container?
- figure out custom context menus - just get rid of them? would be the best
  as for circle CM - its a waste, but what to do with it?

--------------------------------------------------------------------------------
------------------------ CODE IMPERFECTIONS - what sets off my OCD -------------
--------------------------------------------------------------------------------

CLEANUP
- get rid of ROW_HEIGHT and find out how to get row heigh dynamically, also
  set proper padding for table rows and get away with fixedRowSize in playlist
  table FRS doesnt solve this problem as it breaks skins
- Thumbnail get border width param from css
- clean ExtendedInfo widget - its completely fubar
- Serializator and serialization code clean up
- widget info and bridge widget factory and widget a bit more elegantly that this
- centralize window management

API
Layouts---------
- BiContainer nonpure version works only as pure. Its abstract to avoid misuse
- add parametrization and decoupling of gui-type from containers. Generics will
  not help here unfortunately. With type erasure its looking poorly.
- Layouter not part of Layout map. The reason is simple - if it would be, it
  would get wrapped in widgetarea. But other than that, its proving more trouble
  than its worth. Particularly because the Container.indexOf(Layouter) doesnt
  work as it returns null (since its not part of the layout map). Maybe widgets
  could have inherent property of needing Area wrapper, val for Layouter false.
  UniContainer needs to be reworked then.
- separate and implement Pure vs Leaf Containers better

UNIFICATIONS, OVERHAULS, REDESIGN
- playing item, metadata, ... in Playbackmanager, clear Player class
  also involves Playback/Player/Playlist state and suspending/restoring them
- file format discovery. Unite Image and Audio types add category               (minor, although much needed for robustness)
- gui traits add uninstall, put into setters, remove from constructors          (minor, but very desirable and very doable)
- playlist table drag code duplication                                          (technicality, minor code pollution)
- playlist table refresh currupted/playing row pseudoclass css code duplication (technicality, minor code pollution)
- Notification class unite contents, remove enum                                (lot of code + fxml duplicity)
- metadata xml chapter reading class redo - its not good design. But it works   (not needed)
  and is considered legacy code now anyway
- popover investigate default NodeOwner and windowOwner and default move with   
  functionality provided in house by javaFX. I might have reinvented the wheel
  a bit here. It is questionable whether it is worth the effort
- InstanceFieldConfig and StaticClassConfig unite into FieldConfig
- make AppConfigurable and make all managers non static

PERFORMANCE
- closing widgets not releasing memory                                          (still an issue ?)
- onTimeAt events seem to be pretty mem hungry(4x=10MB), implement clock to     (medium)
  cut down number of cycles (200ms should be MORE than enough)
  edit: clock done, reimplement more effectively and clean up
- played files leak on song change                                              (still an issue ?)
- test picture loading
- picker static always in memory - mem leak                                     (not an issue?)
  problem: how to lazy load it if not as static field?
- layout reload mem leak - investigate                                          (major)
- skin refresh memory consumptin investigate                                    (medium)

--------------------------------------------------------------------------------
--------- "PERKS" & WHAT ONE SHOULD KNOW ABOUT - the developer traps -----------
--------------------------------------------------------------------------------

- when operating with playlist, the items must not be cloned or copied in a way
  that creates new item instance. Playlist's behavior is applicable on the
  very instances of the items it contains. Methods such as removeItems(items) or
  isPlaying() will not work for items not contained in the playlist correctly, 
  nor for copies or clones of items in the playlist.
  Even two different playlist tables withing GUI, (in case they are linked to one
  playlist) share the same playlist item object instances. Keep that in mind.
- playlist table row height is fixed for now
- scrollbar width should be 15px. Or table resize (and more) might break.
- thumbnail border is expected to be 2px wide, dont change css until the
  hardcoded part in Thumbnail class is resolved
- instead of javafx.scene.text.Text use Text class provided by the project. It
  is exactly the same but provides css styleclass and support for skinning. Also
  comes in with a handy method
- real main app window is hidden and owner of the others. this way they share
  some of the state like minimized
- tooltip font size for AwesomeDude Label is same as icon size - which means
  if default font size is 12 and the icon's size is 16 tooltips font will be 16.
  Easily solvable by using fontAwesome method which takes font size as param too
- when implementing equals() always test for reference equality like this:
  if(o==this) return true; // this line can make a difference and it will never
  be a bad thing. It can only help.
- when implementing DragEvent make sure to properly accept the incoming drag
  only when all necessary onditions are met, not always. For example if we
  accept onl certain type of files we need to query the dragboard files and
  whether we should accept or not. The accpting has a visual effect and indicates
  to the user whether the drag can be dropped on the specific Node or now with
  an icon.

--------------------------------------------------------------------------------
--------- "PERKS" & WHAT ONE SHOULD KNOW ABOUT - the developer goodies ---------
--------------------------------------------------------------------------------

- need to run code after specific delay? use utilities.FxTimer. By far the most
  simple asynchronous code execution you will have ever used. Plus (or minus
  depending on your 'belief') its all running on appFX thread - no bgr threads,
  no concurrency problems

--------------------------------------------------------------------------------
---------------------- TESTING - what nobody wants to do -----------------------
--------------------------------------------------------------------------------

- writing tag - multiple values
- Layout loading into Container

--------------------------------------------------------------------------------
------------------ HOW TO USE TIPS - what everyone wants from me ---------------
--------------------------------------------------------------------------------

- clicking on table columns sorts ASC/DESC/ORIG, holding SHIFT to sort by
  multiple columns
- holding shift while scrolling will scroll horizontally (where implemented)
- playlist table allows moving of the selected items by dragging
- doubleclicking on window border - LEFT_B-toggle maximize, RIGHT-on/off header
- press ALT to show window hidden header
- press C to collapse layout containers easily