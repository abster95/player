
--------------------------------------------------------------------------------
--------------------- IMMEDIATE  - what is being worked on ---------------------
--------------------------------------------------------------------------------

- implement loading images properly using the twelvemonkeys
- make services lazy, requires better lifecycle handling, service subscriptions/observers/consumers,
  improved config loading, extracting, applying values, widget service dependency reporting, etc
  The most difficult part is to figure out how automatic and manual service start/stop should interplay
- component name in center rather then top_center ?
- ConfigSearch should open Settings and look up the property
- function nodes should support custom name/icon for function parameters. This is probably best done
  by ParameterToNodeStrategy, where
- remove uri builder classes and change plugin model for simple property file with uri building formats
  Its a bit of shame, since these classes use those nice constant parsing annotations (gotta find better use for them)
- try player implementation from gstreamer org.gstreamer.elements.PlayBin2.
- unify Table & Grid Filter + instantiate it lazily
- Configuration should implement Configurable
- GridView selection
    - selectDown bug due to cells not being ready sometimes (so they pseudoclasses wont get applied)
    - scrolling may cause selected cell to lose its selected pseudoclass
- logback could monitor its configuration file
- Configuration config mapset should error out when config is added twice to same key + add keymap function for lower case
- standalone widgets  impl better launching, add OverlayPane display strategy
- break File into FileFile and DirFile and AnyFile(?) for typesafe Configs, theres no way to tell which user wants...
  alternatively make File<FileType>
- widget i/o
    - binding with filtering by instance type needs to determine null handling PASS/IGNORE. How?
    - 1:n binding needs to be able to pick an input strategy USE_SINGLE(MAIN)/USE_LAST/USE_ALL/USE_NONE(FORBID)
      This is not so simple. Gui needs to support user choice, support user determining main output and forbidding and
      there have to be default values as well, preferrably settable per i/o in widget controller
- Logger log text jambled up sometimes + doesnt write jaudiotagger log output sometimes
- impl filter in Settings
- DirViewer
    - optimize the annoying image loading delay that helps scrolling performance, its too much
    - conf gui header
    - impl searching (as opposed to filtering), filtering really makes inability to search evident, follow Table impl
    - cache everything in Item, not Cell as Cells get recreated frequently
    - implement smart image cache, we must not cache all images, gifs can kill app instantly then
    - thumbnails do not load sometimes. This bug definitely exists, but its seemingly random. Threading problem?
    - reload thumbnails when thumb size increasese
    - allow visiting up if parent is only 1
- FileDownloader widget
  - display progress
  - overwrite file if exist option
  - support image tag writing on download to tag images immediatelly and conveniently
- all ConfigFields must support observable Configs, im awed they dont!!
- when WidgetManager widget class file gives java.lang.NoClassDefFoundError app crashes
- implement 'use embedded thumbnail' for all image formats, not just psd
- impl layout refresh() pass so Widget.refresh() can run properly
- parametric function state serialization
- display progressbar when loading images (start on load start, use Thumbnail onLoaded callback) but
  delay a tiny bit (for continued display) and delay hiding a bit more than the bit
- image widget add panning, zooming, rotating support + shortcuts
- save playlists into db instead of xml to improve big playlist startup
- saving multiple playlists is bugged
- I think spectrum suffers from logarithmic band intensity distribution
- custom control skins not working for new windows
- display window snap preview & snap only on mouse release
- widget compilation failure causes recompilation ad infinitum
- toggle action annotation
- remove appliers from all configs, its bad design. use maintain() and subscribtions
  instead. This marvellously increases structural code cohesion.
- rater in tables displays shifted value (bad width calculation in a table cell?)
- figure out gui error reporting method
- figure out image animation autoplay def behavior & indicative play/pause mechanism
- widget compilation - report errors back to user through gui (popup? notfication? else?)
- widget manager monitor .fxml files too
- libraryview placeholder doesnt detect empty table correctly
- explicit config for song enqueue order (Comparator)
- make Configurator config field button single instance, use vertical animation
- Configurator implement drag & drop of Configurables, support any object by turning it into
  Configurable (but using which convention?)
- remove artwork caching?
- improve table performance
- impl Void config which doesnt serialize and has Runnable action executing when
  gui is clicked, the action may open some kind of manager for the section
  config belongs to
  I think this actually solves the Q of Action being Config<Action>. Shouldnt it be Config<Void> ? I not, what
  difference would be between the two and why shouldnt runnable Config<Void> have keys and become Action instead?
  do not show up in filter combobox
- reimplement playcount, chapters tags as custom tags
- FieldedValue hasField predicates This will become part of ObjectField decoupling from Table filters,
  generifying them, etc.
- layout manager + mock widgets
- impl main window switching
- playlist playing item is busted for item duplicates
- ClassMaps should support concurrency if desired
- MapSet is breaking Set equals contract! Java's IdentityHashmap is doing it too, so... fck it?
- Metadata cover caching causes outdated data if cover is set to tag
- layout mode zoom animation use loop to increase smoothness
- filesize use unsigned long to support even larger units
- config field add checkbox list config field, implement for fileInfo
- implement smooth volume on seek
- volume add linear vs logarithmic option
- Inspector implement 'preview'/info pane
- seeker option to show chapters as they are passing
- make generic rater control, use in FileInfo
- tagger add icons to reset and defaults
- tagger cover loading optimize
- guide -> core service, finish guide hints to cover all the basics
- LastFM -> service, implement properly
- popover position jumps on app drag start
- finish nextPlayingItem() & LoopMode thing. Better support with GUI, remember
  order in random playorder
- unify table column resizing, namely getMain column and autoresize with
  main column taking all space, maybe signal locked columns with icon and add
  https://dlemmermann.wordpress.com/2015/12/10/javafx-tip-22-autosize-tree-table-columns/
  menu item for on/off autoresize columns option
- refactor
    - DirViewer's GridView Cell implementation
    - GridView constructors
    - Icon - Extract custom stuff to separate Icon classes and clean up generic Icon class.
           - Add selectedProperty for easy control and observation.
    - main.ImageThumbIconTest
- cleanups
    - Parser, Var, Ref, ActionPane.ActionData, SwitchPane configs, Action
- annoying java "bugs" (problem scope == entire application)
    - do something about the crazy TextField.prefColumnCount overriding prefSize! It totally breaks HGrow in HBox!

--------------------------------------------------------------------------------
--------------------------------- TESTING  -------------------------------------
--------------------------------------------------------------------------------

- make sure all components close properly
- ensure parsing works as expected, particularly catching parsing exceptions
- application instance counting

-------------------------------------------------------------------------------- 
------------------------ BUGS - what i dont want to hear about -----------------
--------------------------------------------------------------------------------

GENERAL
- cant hide index column, shows artifacts                                                           (medium)
- transparent stage causing massive performance degradation for larger stages                       (major, javaFX bug)
  problem: transparent skins, window shadows & screen mouse effects unsupported 
- de-activator position | size a bit off when loading first time & into small                       (minor)
  area. It requires area resize call to initialize correct height/y-ccord 
  use black bgr on the buttons pane to see the issue 
- playlist item moving change order when moving fast even for jsut 1 block                          (minor)
- backslash (\) shortcut not working for left backslash key (left from Z)                           (medium, since more stuff can be affected)
  status: currently unsolvable, so far one of its kind 
  problem: jintellitype '\' works only for right '\' not left one (yes there are 
  two '\' keys on the keyboard). 
- starting paused playback plays the song for an instant                                            (medium)
- local shortcuts for complex characters (BACK_SLASH, etc) not working 
  solution: solved for some characters by manually rewriting them upon 
  shortcut registering, but thats only partial and incomplete workaround  
- popup window fullcreen or maximizing(any) breaks popup position                                   (minor, but should be fixed if possible)
- blurry Configurator graphics in custom3 skin - 99% result of the css warnings                     (javaFX bug ?)
  this happens when something has null skin, investigate & fix 
- Configurator group title alignment doesnt get applied immediately                                 (minor)
  its partially fixed now 
- some songs (happens to be album specific, but specific cause unknown) read                        (jaudiotagger bug?)
  length as twice of the real (note: SmilePrecure OST) 
- sometimes not even suspending playback allows jaudiotagger renaming songs 
  and thus prevents successful tagging. see unabletorename in audio test files 
- when app starts with paused song, playing some other songs starts from that 
  point rather than the beginning 
- some images with very long names 'can not be found' - it is probably windows 
  thing as have experienced problems with long image names before when copying 
  the files in windows
- variable bitrate oggs not playing 
- dragOver event is called repeatedly, we cant use just any code in there 
  (like Fut, which oddly gets computed immediately when created) 
- Fut computed on creation? see above, investigate 
- investigate how to properly remove image scaling artifacts                                        (minor)
  Not an issue since we are using scale factor when loading images, but 
  investigate. When displaying image very close to its loaded size (+-10%) 
  aliasing appears 
- javafx player MediaException: system cant find media file when weird character                    (JavaFX bug)
  in the filename e.g. : 1-21 Fungagaŕ
  Its patched so playback continues with next item, but that isnt a solution. Fill a bug.
- IntelliJ on 64-bit JRE !work. 64-bit dll problem?                                                 (major)
- database throws exception when transaction begins and library is importing files
com.objectdb.o._PersistenceException: Attempt to begin a new transaction when a transaction is active
	at com.objectdb.o._PersistenceException.b(_PersistenceException.java:45) ~[objectdb.jar:na]
	at com.objectdb.o.JPE.g(JPE.java:145) ~[objectdb.jar:na]
	at com.objectdb.o.ERR.f(ERR.java:56) ~[objectdb.jar:na]
	at com.objectdb.o.OBC.onObjectDBError(OBC.java:1503) ~[objectdb.jar:na]
	at com.objectdb.jpa.EMImpl.begin(EMImpl.java:287) ~[objectdb.jar:na]
	at AudioPlayer.services.database.Db.updatePer(Db.java:181) ~[Player/:na]
	at AudioPlayer.Player.lambda$refreshItemsWithNow$13(Player.java:201) ~[Player/:na]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1158) ~[na:na]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:632) ~[na:na]
	at java.lang.Thread.run(Thread.java:804) ~[na:na]
Caused by: com.objectdb.o.UserException: Attempt to begin a new transaction when a transaction is active
	at com.objectdb.o.MSG.d(MSG.java:62) ~[objectdb.jar:na]
	at com.objectdb.o.OBC.E(OBC.java:1460) ~[objectdb.jar:na]
	at com.objectdb.o.OBM.bK(OBM.java:708) ~[objectdb.jar:na]
	at com.objectdb.jpa.EMImpl.begin(EMImpl.java:284) ~[objectdb.jar:na]
	... 5 common frames omitted

SOLVED (but the underlying cause still deserves attention) 
- reading metadata COMMENT tag field incorrectly reads CUSTOM1 if comment                           (medium)
  nonempty. 
  solution: custom comment reading method filters out CUSTOM fields                                 (great)
- split container divider position not applied properly (vertical only).                            (medium)
  note: how does orientation come into this: unknown 
  solution: have each splitter wait 2 seconds and apply the position again 
  problem: arbitrary waiting value might not work in all cases + puttin the 
  divider near edge (1 or 0 value) by resizing the Pane will deform the value 
  and it doesn retain correct position. Re-applying it doesnt work because of 
  this bug. Platform.runLater is the only workaround and it can not be used here 
  See the Splitter class for more information 
- javafx.scene.text.Text doesnt have css style class and as such doesn allow 
  default values and skinning 
  solution: Text class extending javafx.scene.text.Text and adding custom  
  styleclass. Use instead of the original if default behavior (skin) is expected 
  Also got a nice additional method. 
  note: there actually is a styleclass for the Text: .Text   
  investigate, test, reimplement 
- open PopOvers prevent app to close normally.                                                      (medium-major)
  cause: javaFX bug 
  solution: Manually close them all when main window closes (introduces some                        (good)
  code pollution). Requires static list. 
- fullscreen not initializing on window deserialization, update() method bug                        (minor)
  cause: unknown                                                                                    (javafx bug?)
  problem: fullscreen is set, resizability is set to false, the fs hint is shown 
  but the window does not cover whole screen - maybe its too soon 
  and the window is not really fully initialized 
  solution: delay execution 100ms (see WindowBase.update())                                         (not ideal but no problems)
- app not closing propery on ALT+F4                                                                 (medium-major)
  cause: ALT+F4 and closing app from taskbar calling window.closeRequst 
  closes focused window not application. It somehow closes windows 
  without closing them (close() does not get invoked). Because of this closing 
  main window this way doesnt execute the necessary actions. Also, with the 
  hidden owner window app wont close as one window remains open 
  solution: have onCloseRequest event execute close() 
- some local shortucts (F3,F4,F5,...) not registering as app shortcuts                              (major)
  cause: unknown, so far affects only some F keys (some F keys are fine) 
  solution: delay registering in runLater()                                                         (great)
  details: see Action.class register() 
- when table selection changes from 2 selected items, the selectedItems()                           (medium, javaFX bug?)
  list will contain null instead of the newly selected element (the one added,  
  or the one remaining) 
  cause: unknown 
  solution: iterate over the list with stream().limit(3) 
  affected: LibraryView filterList(), InfoTable 
- Icon does not support disabled style (opacity 0.4). Thus it was added in css.                     (minor, inconvenience)
  But if set as graphics in MenuBar (and probably in MenuItem and so on) the 
  style gets applied twice! javafx apparently applies the disabled state on the
  graphics of Labelled on its own!
  workaround: when intended to be used as graphics, call embedded() method
  on the icon. it will set different styleclass disabling the disable style
- Thumbnail border has inconsistent border width/size and is not crisp. See Thumbnail.java file     // medium
- tables consuming SHIFT key and local shortcuts like SHIFT+ARROWs !work after any
  table receives focus for the 1st time -> useless...

-------------------------------------------------------------------------------- 
------------------------------------- NOTES ------------------------------------
--------------------------------------------------------------------------------

- util.dev.TODO annotates also bugged code, CTRL+F it throughout the project
- heap: Use -Xmx1g, possibly more
  Large images need more memory. Default heap size WILL cause out of memory
  exceptions for images like 6k x 6k px & closing in on 10MB...
- any VM arguments, in order to be used in self-contained app, need to be
  specified in the build.xml file (Netbeans), for IntelliJ Idea, i have no idea. Fortunately
  I already have the .exe (which runs the application jar) built and it can be reused. It passes
  the argument into VM itself.
- Event consuming (namely mouse events): As a general rule, always consume unless you have a reason
  not to. Its simple: not consuming results in 'multiple' behavior problem since event propagates 
  until it is consumed. Normally, one event should cause one behavior.

  As an example, not consuming button mouse click may start window resizing if some of the
  button's parent works that way. The graphics must not assume what the parent does. Hence we 
  consume the event. Simple.

  A counter example, say you monitor movement of mouse (MOUSE_MOVED) and drag a node
  a mouse. Maybe parent graphics shows an effect or monitors mouse coordinates,
  but if the event gets consumed it wont be able to.
  Hence, it is important to think about whether the behavior is one-and-only or can play along
  with different behaviors. Dont assume and consume. If the parent's behavior needs to run no matter 
  what its children do, then it should use event filters to bypass the consumption.