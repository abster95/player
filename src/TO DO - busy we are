
--------------------------------------------------------------------------------
--------------------- IMMEDIATE  - what is being worked on ---------------------
--------------------------------------------------------------------------------

- javafx player MediaException: system cant find media file  when weird character
  in the filename e.g. : 1-21 Fungagaŕ
- toggle action annotation
- remove appliers from all configs, its bad design. use maintain() and subscribtions
  instead. This marvellously increases structural code cohesion.
- overlaypane controls position off
- parser still not 100%, cleanup noEx() and implement polymorphic stringparse strategy discovery
- rater in tables displays shifted value (bad width calculation in a table cell?)
- figure out gui error reporting method
- figure out image animation autoplay def behavior & indicative play/pause mechanism
- widget compilation - report errors back to user through gui (popup? notfication? else?)
- widget manager monitor .fxml files too
- libraryview placeholder doesnt detect empty table correctly
- Thumbnails should reload image when they are resized. Im not sure making this global
  behavior is a good idea, maybe it is. Hm. DirViewer suffers when user changes thumb size. This
  sure can be solved manually, but...
- optimize GridView. Virtualize rows and cells as nongraphical objects providing
  only x,y,width,height for the custom graphics to resizeRelocate within a single
  parent for all cells' graphics rendered all at once in gridview's layoutChildren()
  This may or may not be possible depending on whether it requires virtual flow modification
- explicit config for song enqueue order
- make Configurator config field button single instance, use vertical animation
- Configurator implement drag & drop of Configurables, support any object by turning it into 
  Configurable (but using which convention?)
- dir viewer allow visiting up if parent is only 1
- remove artwork caching?
- improve table performance
- Void config which doesnt serialize and has Runnable action executing when
  gui is clicked, the action may open some kind of manager for the section
  config belongs to
  do not show up in filter combobox
- reimplement playcount, chapters tags as custom tags
- FieldedValue hasField predicates
- layout manager + mock widgets
- main window switching
- playlist playing item is busted for item duplicates
- ClassMaps should support concurrency if desired
- Metadata cover caching causes outdated data if cover is set to tag
- layout mode zoom animation use loop to increase smoothness
- filesize use unsigned long to support even larger units
- config field add checkbox list config field, implement for fileInfo
- implement smooth volume on seek
- volume add linear vs logarithmic option
- Inspector implement 'preview'/info pane
- seeker option to show chapters as they are passing
- make generic rater control, use in fileinfo
- tagger add icons to reset and defaults
- tagger cover loading optimize
- decide what exactly is plugin and service. Stuff avaiable in app from the
  being a service doesnt sit well with me. Basically the only thing i did it
  like that was to be able to control lifecycle. 
  1: plugins may me implementation of functionalities that will be 'exposed'
     as pluggable (@IsPluggable). These may be services too.
  2: service is anything requiring a lifecycle and with no ui
  3: core services should be exposed as APP components in addition to being
     registered as services. for sanity.
- guide -> core service, finish guide hints to cover all the basics
- LastFM -> service, implement properly
- popover position jumps on app drag start & fix icon shadows affecting
  layout
- item->metadata
- cleanup PopOver positioning
- finish nextPlayingItem() & LoopMode thing. Better support with GUI, remember 
  order in random playorder
- Generic FileType class, particularly need separation on 'groups' like
  audio, video, image, etc... See:
  http://stackoverflow.com/questions/51438/getting-a-files-mime-type-in-java
  http://stackoverflow.com/questions/7904497/is-there-an-enum-with-mime-types-in-java
  http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/net/MediaType.html
- unify table column resizing, namely getMain column and autoresize with 
  main column taking all space, maybe signal locked columns with icon and add
  https://dlemmermann.wordpress.com/2015/12/10/javafx-tip-22-autosize-tree-table-columns/
  menu item for on/off autoresize columns option
- cleanups: ActionPane, GridView, Var, Ref, SingleRef

-------------------------------------------------------------------------------- 
--------------------------------- TESTING  -------------------------------------
--------------------------------------------------------------------------------

- make sure all components close properly

-------------------------------------------------------------------------------- 
------------------------ BUGS - what i dont want to hear about -----------------
--------------------------------------------------------------------------------

GENERAL
- cant hide index column, shows artefacts                                                           (medium)
- transparent stage causing massive perfomance degradation for larger stages                        (major, javaFX bug)
  problem: transparent skins, window shadows & screen mouse effects unsupported 
- deactivator position | size a bit off when loading first time & into small                        (minor)
  area. It requires area resize call to initialize correct height/y-ccord 
  use black bgr on the buttons pane to see the issue 
- playlist item moving change order when moving fast even for jsut 1 block                          (minor)
- backslash (\) shortcut not working for left backslash key (left from Z)                           (medium, since more stuff can be affected)
  status: currently unsolvable, so far one of its kind 
  problem: jintellitype '\' works only for right '\' not left one (yes there are 
  two '\' keys on the keyboard). 
- starting paused playback plays the song for an instant                                            (medium)
- local shortcuts for complex characters (BACK_SLASH, etc) not working 
  solution: solved for some characters by manually rewriting them upon 
  shortcut registering, but thats only partial and incomplete workaround  
- popup window fullcreen or maximizing(any) breaks popup position                                   (minor, but should be fixed if possible)
- blurry Configurator graphics in custom3 skin - 99% result of the css warnings                     (javaFX bug ?)
  this happens when something has null skin, investigate & fix 
- Configurator group title alignment doesnt get applied immediately                                 (minor)
  its partially fixed now 
- some songs (happens to be album specific, but specific cause unknown) read                        (jaudiotagger bug?)
  length as twice of the real (note: SmilePrecure OST) 
- sometimes not even suspending playback allows jaudiotagger renaming songs 
  and thus prevents successful tagging. see unabletorename in autdio test files 
- when app starts with paused song, playing some other songs starts from that 
  point rather than the beginning 
- some images with very long names 'can not be found' - it is probably windows 
  thing as have experienced problems with long image names before when copying 
  the files in windows  
- variable bitrate oggs not playing 
- dragOver event is called repeatedly, we cant use just any code in there 
  (like Fut, which oddly gets computed immediately when created) 
- Fut computed on creation? see above, investigate 
- investigate how to properly remove image scaling artifacts                                        (minor)
  Not an issue since we are using scale factor when loading images, but 
  investigate. When displaying image very close to its loaded size (+-10%) 
  aliasing appears 
 
SOLVED (but the underlying cause still deserves attention) 
- reading metadata COMMENT tag field incorrectly reads CUSTOM1 if comment                           (medium)
  nonempty. 
  solution: custom comment reading method filters out CUSTOM fields                                 (great)
- split container divider position not applied properly (vertical only).                            (medium)
  note: how does orientation come into this: unknown 
  solution: have each splitter wait 2 seconds and apply the position again 
  problem: arbitrary waiting value might not work in all cases + puttin the 
  divider near edge (1 or 0 value) by resizing the Pane will deform the value 
  and it doesn retain correct position. Re-applying it doesnt work because of 
  this bug. Platform.runLater is the only workaround and it can not be used here 
  See the Splitter class for more information 
- javafx.scene.text.Text doesnt have css style class and as such doesn allow 
  default values and skinning 
  solution: Text class extending javafx.scene.text.Text and adding custom  
  styleclass. Use instead of the original if default behavior (skin) is expected 
  Also got a nice additional method. 
  note: there actually is a styleclass for the Text: .Text   
  investigate, test, reimplement 
- open PopOvers prevent app to close normally.                                                      (medium-major)
  cause: javaFX bug 
  solution: Manually close them all when main window closes (introduces some                        (good)
  code pollution). Requires static list. 
- fullscreen not initializing on window deserialization, update() method bug                        (minor)
  cause: unknown                                                                                    (javafx bug?)
  problem: fullscreen is set, resizability is set to false, the fs hint is shown 
  but the window does not cover whole screen - maybe its too soon 
  and the window is not really fully initialized 
  solution: delay execution 100ms (see WindowBase.update())                                         (not ideal but no problems)
- app not closing propery on ALT+F4                                                                 (medium-major)
  cause: ALT+F4 and closing app from taskbar calling window.closeRequst 
  closes focused window not application. It somehow closes windows 
  without closing them (close() does not get invoked). Because of this closing 
  main window this way doesnt execute the necessary actions. Also, with the 
  hidden owner window app wont close as one window remains open 
  solution: have onCloseRequest event execute close() 
- some local shortucts (F3,F4,F5,...) not registering as app shortcuts                              (major)
  cause: unknown, so far affects only some F keys (some F keys are fine) 
  solution: delay registering in runLater()                                                         (great)
  details: see Action.class register() 
- when table selection changes from 2 selected items, the selectedItems()                           (medium, javaFX bug?)
  list will contain null instead of the newly selected element (the one added,  
  or the one remaining) 
  cause: unknown 
  solution: iterate over the list with stream().limit(3) 
  affected: LibraryView filterList(), InfoTable 
- Icon does not support disabled style (opacity 0.4). Thus it was added in css.                     (minor, inconvenience)
  But if set as graphics in MenuBar (and probably in MenuItem and so on) the 
  style gets applied twice! javafx apparently applies the disabled state on the
  graphics of Labelled on its own!
  workaround: when intended to be used as graphics, call embedded() method
  on the icon. it will set different styleclass disabling the disable style
- Thumbnail border has inconsistent border width/size and is not crisp. See Thumbnail.java file     // medium
 
-------------------------------------------------------------------------------- 
------------------------------------- NOTES ------------------------------------
--------------------------------------------------------------------------------

- util.dev.TODO annotates also bugged code, CTRL+F it throurough the project
- heap: Use -Xmx1g, possibly more
  Large images need more memory. Default heap size WILL cause out of memory
  exceptions for images like 6k x 6k px & closing in on 10MB...
- any VM arguments, in order to be used in self-contained app, need to be
  specified in the build.xml file
- Event consuming (namely mouse events): As a general rule, always consume unless you have
  a reason not to. Its simple: not consuming results in 'multiple' behavior problem since
  event propagates until it is consumed. Normally, one event should cause one behavior.
  
  As an example, not consuming button mouse click may start window resizing if some of the
  button's parent works that way. The graphcis you are coding must not assume what the
  parent graphics does. Hence we consume the event. Simple.

  AS a counter example, say you monitor movement of mouse (MOUSE_MOVED) and move a node
  along with the mouse cursor. Maybe parent graphics shows an effect or monitors mouse coordinates,
  but if the event gets consumed it will not.
  Hence, it is important to think about whether the behavior is one-and-only or can play along
  with different behaviors. The latter requires the graphics to 'know' its context (what its parents
  do), so it imposes tight coupling (and should only be used where the graphics is tightly
  coupled to begin with). This dilemma can be 'fixed': dont assume and consume. If the parent's 
  behavior runs no matter what its children do, then it should use event flters, which execute
  before handlers, so consuming in the handlers has no effect then.
