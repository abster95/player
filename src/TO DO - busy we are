
--------------------------------------------------------------------------------
--------------------- IMMEDIATE  - what is being worked on ---------------------
--------------------------------------------------------------------------------

- add uri verifier before adding to playlist and get runtime exception
- popover position jumps when drag starts
- tagger use trash big icon or sth when removing cover by drag and add icon
  for the reverse operation
- interrupt reading if double reading
- support 'infos' - custom tagged extended comments like chapters - figure out
  a good delimiter character - '|' is too common i think
- window apply overlay on new window upon creation
- windw header visible preference application is weird 4                        (?)
- popover set arrow location automatically based on available screen space
  getWidget - implement Target
- rater controls not resizing graphics
- playlist table header button implement properly column hiding (nasty bug)
- playlist index column width still not perfect
- mini window bgr stretched, artefact on the right since menu doesnt have bgr
- miniMode autohide add option, clean code, start autohide on window creation
- minimode popups should prevent from autohiding, but how?
- bookmark config serialisation - hahsmap not supported
- thumbnail image bound to prefSize causes problems, anchorPane doesn work
- cant open two info popup at once - evolution of singleton = death...
- remove custom context menus as they are now
- emty metadata MUST NOT return File("") ! - EMPTY_FILE instance? with custom 
  URI scheme for example?
- Rater make base skin
- tab area - select tab on mouse release not press or avoid loading content
  somehow when reordering
- tab drag areas vs tabs implement both at once
- configurator empt shortcut not defaulting? fix
- ALT+F4 closes windows separately instead whole app
- press C to collapse layout containers easily - implement properly
- NOTIFICATION PADDING WRONG (AGAIN) - sometimes
- '/n' character expands table row height, figure out how to disable that...
- allow multiselection in library metadata group -> support multiple values in
  AND filtering for query
- library refresh cells
- adding to library reeading gradually slows down a lot + RAm goes up, batch it
  try adding items in count of 100-500 each batch within its own transaction &
  entity manager. I think having 10+k managed items is not healthy...
  if we maintain the initial speed the whole time ill be very happy with the
  result
- library shortcuts
- table node orientation neends recreation of the whole table to take effect
  improve playlistTable to take effect immediatelly in Playlist widget
- library remember value is Object field turn into Config with overriden getType
  that gets the type from the field type config, or unify the two into one
  double value config
- writing to tag for files without tag fails sometimes (jaudiotagger cant rename
  file, it looks like it is locked)
--------------------------------------------------------------------------------
------------------------ BUGS - what i dot want to hear about ------------------
--------------------------------------------------------------------------------

GENERAL
- deactivator position | size a bit off when loading first time & into small
  area. It requires area resize call to initialize correct height/y-ccord
- playlist manual sorting does not work
- Thumbnail borde rchanges size of the control - not good at all
- Enviroment Dektop.browse() doesnt select files in explorer but opens them     (unsolvable?)
- little bug with position slider on manual seeking                             (minor)
  cause: it takes a while for seek() to actually seek. During this time the
  seeker jumps back to current position. Its bad because the seeker already was
  at the right position when mouse pressed took place - solution unknown
  idea: use 2nd thumb for seeking or allow position change only within treshold
  from the seeked position for limited amount of time
- playlist item moving change order when moving fast even for jsut 1 block      (medium-major, investigate)
- backslash (\) shortcut not working for left backslash key (left from Z)       (medium, since more stuff can be affected)
  status: currently unsolvable, so far one of its kind
  problem: jintellitype '\' works only for right '\' not left one (yes there are
  two '\' keys on the keyboard).
- global shortcuts sometimes still fail to register to proper keys and register (medium, investigate cases)
  for ALT instead. It happened only once since last reimplementation and it was
  probabyly a result of messing around with configs. But it can still produce
  issues and return.
- starting playback at given previous position seeks to beginning for a while   (medium)
  cause: possibly the same as the seeker bug
- local shortcuts for complex characters (BACK_SLASH, etc) not working
  solution: solved for some characters by manually rewriting them upon
  shortcut registering, but thats only partial and incomplete workaround
- popup window fullcreen or maximizing(any) breaks popup position               (minor, but should be fixed if possible)
- tagger verifier causes layout graphics to break when mouse over window border (controlsFX bug)
- blurry Configurator graphics in custom3 skin - 99% result of the css warnings (javaFX bu)
- Configurator group title alignment doesnt get applied on refresh
- context menu position sometimes off (even default ones). The cause must be
  its parent Node not initializing size correctly

SOLVED (but the underlying cause still deserves attention)
- reading metadata COMMENT tag field incorrectly reads CUSTOM1 if comment       (medium)
  nonempty.
  solution: custom comment reading method filters out CUSTOM fields             (great)
- split container divider position not applied properly (vertical only).        (medium)
  note: how does orientation come into this: unknown
  solution: have each splitter wait 2 seconds and apply the position again
  problem: arbitrary waiting value might not work in all cases + puttin the
  divider near edge (1 or 0 value) by resizing the Pane will deform the value
  and it doesn retain correct position. Re-applying it doesnt work because of
  this bug. Platform.runLater is the only workaround and it can not be used here
  See the Splitter class for more information
- javafx.scene.text.Text doesnt have css style class and as such doesn allow
  default values and skinning
  solution: Text class extending javafx.scene.text.Text and adding custom 
  styleclass. Use instead of the original if default behavior (skin) is expected
  Also got a nice additional method.
  note: there actually is a styleclass for the Text: .Text
- open PopOvers prevent app to close normally.                                  (medium-major)
  cause: javaFX bug
  solution: Manually close them all when main window closes (introduces some    (good)
  code pollution). Requires static list.
- fullscreen not initializing on window deserialization, update() method bug    (minor)
  cause: unknown                                                                (javafx bug?)
  problem: fullscreen is set, resizability is set to false, the fs hint is shown
  but the window does not cover whole screen - maybe its too soon
  and the window is not really fully initialized
  solution: delay execution 100ms (see WindowBase.update())                     (not ideal but no problems)
- app not closing propery on ALT+F4                                             (medium-major)
  cause: ALT+F4 and closing app from taskbar calling window.closeRequst
  closes focused window not application. It somehow closes windows
  without closing them (close() does not get invoked). Because of this closing
  main window this way doesnt execute the necessary actions. Also, with the
  hidden owner window app wont close as one window remains open
  solution: have onCloseRequest event execute close()
- bgr artefacts for window header buttons and icons
  cause: rgba (-fx-panel-color) for .header styleclass                          
  solution: use rgb color and apply -fx-opacity instead of alpha channel
  problem: css polution, dev might overlook header if he changes -fx-panel-color


PROBLEMS
- fxml widget deserializing prevent app crash when deserialized widget has no   (minor, but invasive misbehavior)
  factory available - also instantiatingController should never return null in
  fxmlFactory
- windows hard to drag, especially in headerless mode, uidrag consume event, 
  properly handle vol scolling and app dragging event consuminf at widget level
- dynamically create LayoutAggregator depending on size or preferences when
  deserializing and creating windows, or make it into a container?
- circle context menu find some use for it

--------------------------------------------------------------------------------
------------------------ CODE IMPERFECTIONS - what sets off my OCD -------------
--------------------------------------------------------------------------------

CLEANUP
- Serializator and serialization classes clean up
- widget info and bridge widget factory and widget a bit more elegantly that this
- clean window code and centralize it un one place
- separate and implement Pure vs Leaf Containers better
- use assertions more, in FieldConfig too

UNIFICATIONS, OVERHAULS, REDESIGN
- playing item, metadata, ... in Playbackmanager, clear Player class
  also involves Playback/Player/Playlist state and suspending/restoring them
- file format discovery. Unite Image and Audio types add category               (not needed for now)
- gui traits add uninstall, put into setters, remove from constructors          (minor, but very desirable and very doable)
- Notification class unite contents, remove enum                                (lot of code + fxml duplicity)
- metadata xml chapter reading class redo - its not good design. But it works   (not needed)
  and is considered legacy code now anyway
- popover investigate default NodeOwner and windowOwner and default move with   
  functionality provided in house by javaFX. I might have reinvented the wheel
  a bit here. It is questionable whether it is worth the effort
- make AppConfigurable and make all managers non static

PERFORMANCE
- layout reload mem leak - investigate                                          (major)
- skin memory consumptin investigate                                            (major)
  it appears that the skin eats 40MB more of memory compared to Modena
- Container getAll Children/Containers/Widgets improve performance
- configs memory - for example COnfigurator widget consumes about 50MB
- scanning files & adding to library sometimes causes massive memory overhead
  (1,5GB for 8GB of audio files)
  cause: unknown, possible corrupted tag, messing up jAudotagger library
  note: happenns only for my XRay Dog album collection. The cause will be local.

--------------------------------------------------------------------------------
--------- "PERKS" & WHAT ONE SHOULD KNOW ABOUT - the developer traps -----------
--------------------------------------------------------------------------------

- when operating with playlist, the items must not be cloned or copied in a way
  that creates new item instance. Playlist's behavior is applicable on the
  very instances of the items it contains. Methods such as removeItems(items) or
  isPlaying() will not work for items not contained in the playlist correctly, 
  nor for copies or clones of items in the playlist.
  Even two different playlist tables withing GUI, (in case they are linked to one
  playlist) share the same playlist item object instances. Keep that in mind.
- playlist table row height is fixed for now
- scrollbar width should be 15px. Or table resize (and more) might break.
- thumbnail border is expected to be 2px wide, dont change css until the
  hardcoded part in Thumbnail class is resolved
- instead of javafx.scene.text.Text use Text class provided by the project. It
  is exactly the same but provides css styleclass and support for skinning. Also
  comes in with a handy resize methods
- real main app window is hidden and owner of the others. this way they share
  some of the state like minimized
- tooltip font size for AwesomeDude Label is same as icon size - which means
  if default font size is 12 and the icon's size is 16 tooltips font will be 16.
  Easily solvable by using fontAwesome method which takes font size as param too
- when implementing equals() always test for reference equality like this:
  if(o==this) return true; // this line can make a difference and it will never
  be a bad thing. It can only help.
- when implementing DragEvent make sure to properly accept the incoming drag
  only when all necessary onditions are met, not always. For example if we
  accept only certain type of files we need to query the dragboard files and see
  whether we should accept or not. The accepting has a visual effect and indicates
  to the user whether the drag can be dropped on the specific Node or now with
  an icon - so it should work reflect the reality.
  Also: try to set the correct TransferMode (COPY | MOVE | ANY) to indicate
  transfer (both accepting and firing event)
  Also: always use setCompleted(true) when drag drops and is handled
- always consume events by calling Event.consume(). But only if it was handled.
  For example if we handle only left button mouse clicks, do not consume also
  right button clicks, instead let them propagate below. Goes for drag events
  as well.
--------------------------------------------------------------------------------
--------- "PERKS" & WHAT ONE SHOULD KNOW ABOUT - the developer goodies ---------
--------------------------------------------------------------------------------

- need to run code after specific delay? use utilities.FxTimer. By far the most
  simple asynchronous code execution you will have ever used.
  Its also running on appFX thread - no bgr threads, no concurrency problems.

--------------------------------------------------------------------------------
---------------------- TESTING - what nobody wants to do -----------------------
--------------------------------------------------------------------------------

- Layout loading into Container
- onTime events, make sur ethey fire correctly and dont degrade performance