This document aims to help with skinning and anything that is related to it.

********* BASICS

- JavaFX supports changing graphical components through css
- a css an apply on the whole application or only on some component or module.
  This is done by attaching the css to that element either in .fxml file or in
  java code.

OVERRIDING

- a skin can override another one
- for java8, there is Modena.css serving as a default skin. 
- this application however uses heavily edited version of Modena to provide
  easier skin overriding. This default skin is always in effect but can be
  completely overriden.
- Any skin in the Skins directory will automatically override the values of the
  default skin or use them if the skin doesnt provide value.
- In other words write code only for that you want to change


********* SKIN CREATION

TOOLS
- you will be writing so grab a text editor, recommended one that highlights
  syntax or IDE such as Netbeans (which can highlight parsing errors for it)
- official css guide : http://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html
- defaul skin to understand what values to override. See 
  

SKIN FILE - necessary requirements
- skin must be single .css file
- located in /Skins directory and its own subdirectory with the same name
  for example:  .../Skins/MySkin/MySkin.css

- the name of the skin file will be used in the application as the name of the
  skin
- the skin can refer to external files (like images). It is highly recommended to
  put all required files into the same directory as skin's css file

SKINNING
- to learn the names of classes and objects and how to skin them, please refer to
  'Default Skin reference.txt' file, which contains complete css code for the
  application.
  You can also consult Modena.css which is official javaFX8 skin, but the default
  application skin derives from Modena directly.


SUB SKINNING
- some parts of the application or external widgets and the like can use their
  own skins locally. Those must be located in the widget or module's respective
  directory. Developer of those modules must manually link those css files in
  java code or .fxml file.
- some custom controls support dynamic skinning - by looking up and loading
  available external css.
  See  /controls directory.

TIPS
- use global variables defined within .root{} instead of repeating the value
  thorough the skin. Example of this practice can be found in Modena.css or also
  default skin of tis application.
- document everything as much as possible

PERFORMANCE
- skins can easily degrade application performance. Particularly effect such 
  shadow or blur when overused (with text for example). Use them wisely.
  The performance impact is often subtle but it adds up. 
- Test performance by comparing your skin against defaultapplication skin.


INTRO

- styleclass: 

An 'id' for all elements of certain type. Example: .button, .button-arrow

Sometimes you might see something like this: .button > .label . It simply
means there is label directly within button and it doesnt have its own unique
styleclass (like 'button-labbel'), rather is accessed as subcomponent of the
button

Styleclass is specified in .fxml file or java code. Developers can make their
own styleclasses.

Elements can have more styleclasses that override each other.

Syntax:

.button {
    // here comes code definind appearance of element with styleclass button
}


- pseudoclass:

 A state of the element. For example hover, focused, etc. 
Developer can define custom pseudoclasses for example .playlist-item:unplayable

Syntax: 

.button {
    // normal state
}
.button:hover {
    // set appearance for mouse hover state
    // do not repeat values, they will be copied from normal state
}
.button:hover > label {
    // set label appearance when button is in hover state
}
.button > .label:hover {
    // set label appearance when label is in hover state
}