This document aims to help with skinning and anything that is related to it.

********* BASICS
- skins are css files
- skins have application-wide effect - anything can be skinned

OVERRIDING
- for java8, there is Modena.css serving as a default skin implementation. The
  custom skins dont override it, rather completely replace its effects. For this
  reason, it is impossible to only implement the skin partially (or rather, it
  is not recommended because uninplemented values will not fall back to Modena
  values, but remain empty). This can be easily solved by cloning already existing
  skin and starting your own skin from there. The best bet is to use Modena.css.
- there is planned support for skins that override used skin (one would have two
  skins in effect - one default and second overriding some values.)
- some values can be overriden from code and might not take effect
  for example Font and its attributes

********* SKIN CREATION

COMPATIBILITY WITH APP
- skin must be single .css file
- this file must be put into Skins directory and its own subdirectory such as the
  path to it will be something like .../Skins/MySkin/MySkin.css
- as displayed above, the parent directory's and the skin file's names must match
- the name of the skin file will be used in the application as the name of the
  skin
- the skin can refer to external files (like images). It is highly recommended to
  put all required files into the same directory as skin's css file

SKINNING
- to learn the names of classes and objects and how to skin them, please refer to
  Modena.css which contains everything
- to learn more about classes and how they tend to affect parts of the application,
  please refer to .fxml files. Use Oracle's SceneBuilder application for more
  convenient browsing and visual examining of the application graphics. This app
  also supports displaying the skins.

NON_DEFAULT classes and pseudoclasses
- there are several classes and pseudoclasses that are not within Modena.css as
  they are application specific. To find out about them, please refer to
  DefaultStyle.css, more specifically the category CUSTOM at the bottom of the
  file
- If skin implements its own classes. In such case it is recommended to further
  separate them from default and application-wide custom classes
- some parts of the application or external widgets and the like can use their
  own skins locally. Those must be located in the widget or module's respective
  directory
- furthermore, some custom controls support skinning too (for example change of
  background or color) and they must be skinned in their respective .css file as
  well.

TIPS
- use global variables defined within .root{} instead of repeating the value
  thorough the skin. Example of this practice can be found in Modena.css or also
  DefaultSkin.css

PERFORMANCE
- skins can easily degrade application performance. Particularly effect such 
  shadow or blur when overused. Use them wisely. The performance impact can often
  be subtle but it is there so it recommended to test it against Modena.css skin
  to get good comparison.
- It is very likely that overriding value of the skin from local one causes more
  performance degradation.
- Unless there is something wrong, there shouldnt be any real performance problem.
